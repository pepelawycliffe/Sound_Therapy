// Generated by view binder compiler. Do not edit!
package com.github.ashutoshgngwr.noice.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.github.ashutoshgngwr.noice.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DurationPickerViewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button eightHourButton;

  @NonNull
  public final Button fiveMinuteButton;

  @NonNull
  public final Button fourHourButton;

  @NonNull
  public final Button oneHourButton;

  @NonNull
  public final Button oneMinuteButton;

  @NonNull
  public final Button resetButton;

  @NonNull
  public final Button thirtyMinuteButton;

  private DurationPickerViewBinding(@NonNull LinearLayout rootView, @NonNull Button eightHourButton,
      @NonNull Button fiveMinuteButton, @NonNull Button fourHourButton,
      @NonNull Button oneHourButton, @NonNull Button oneMinuteButton, @NonNull Button resetButton,
      @NonNull Button thirtyMinuteButton) {
    this.rootView = rootView;
    this.eightHourButton = eightHourButton;
    this.fiveMinuteButton = fiveMinuteButton;
    this.fourHourButton = fourHourButton;
    this.oneHourButton = oneHourButton;
    this.oneMinuteButton = oneMinuteButton;
    this.resetButton = resetButton;
    this.thirtyMinuteButton = thirtyMinuteButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DurationPickerViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DurationPickerViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.duration_picker_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DurationPickerViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.eight_hour_button;
      Button eightHourButton = rootView.findViewById(id);
      if (eightHourButton == null) {
        break missingId;
      }

      id = R.id.five_minute_button;
      Button fiveMinuteButton = rootView.findViewById(id);
      if (fiveMinuteButton == null) {
        break missingId;
      }

      id = R.id.four_hour_button;
      Button fourHourButton = rootView.findViewById(id);
      if (fourHourButton == null) {
        break missingId;
      }

      id = R.id.one_hour_button;
      Button oneHourButton = rootView.findViewById(id);
      if (oneHourButton == null) {
        break missingId;
      }

      id = R.id.one_minute_button;
      Button oneMinuteButton = rootView.findViewById(id);
      if (oneMinuteButton == null) {
        break missingId;
      }

      id = R.id.reset_button;
      Button resetButton = rootView.findViewById(id);
      if (resetButton == null) {
        break missingId;
      }

      id = R.id.thirty_minute_button;
      Button thirtyMinuteButton = rootView.findViewById(id);
      if (thirtyMinuteButton == null) {
        break missingId;
      }

      return new DurationPickerViewBinding((LinearLayout) rootView, eightHourButton,
          fiveMinuteButton, fourHourButton, oneHourButton, oneMinuteButton, resetButton,
          thirtyMinuteButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
