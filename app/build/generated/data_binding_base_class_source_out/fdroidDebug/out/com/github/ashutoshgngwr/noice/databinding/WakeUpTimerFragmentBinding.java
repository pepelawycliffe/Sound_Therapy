// Generated by view binder compiler. Do not edit!
package com.github.ashutoshgngwr.noice.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ScrollView;
import android.widget.TimePicker;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import com.github.ashutoshgngwr.noice.R;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class WakeUpTimerFragmentBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final SwitchCompat is24hView;

  @NonNull
  public final Slider mediaVolumeSlider;

  @NonNull
  public final Button resetTimeButton;

  @NonNull
  public final Button selectPresetButton;

  @NonNull
  public final Button setTimeButton;

  @NonNull
  public final CheckBox shouldUpdateMediaVolume;

  @NonNull
  public final TimePicker timePicker;

  private WakeUpTimerFragmentBinding(@NonNull ScrollView rootView, @NonNull SwitchCompat is24hView,
      @NonNull Slider mediaVolumeSlider, @NonNull Button resetTimeButton,
      @NonNull Button selectPresetButton, @NonNull Button setTimeButton,
      @NonNull CheckBox shouldUpdateMediaVolume, @NonNull TimePicker timePicker) {
    this.rootView = rootView;
    this.is24hView = is24hView;
    this.mediaVolumeSlider = mediaVolumeSlider;
    this.resetTimeButton = resetTimeButton;
    this.selectPresetButton = selectPresetButton;
    this.setTimeButton = setTimeButton;
    this.shouldUpdateMediaVolume = shouldUpdateMediaVolume;
    this.timePicker = timePicker;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static WakeUpTimerFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static WakeUpTimerFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.wake_up_timer_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static WakeUpTimerFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.is_24h_view;
      SwitchCompat is24hView = rootView.findViewById(id);
      if (is24hView == null) {
        break missingId;
      }

      id = R.id.media_volume_slider;
      Slider mediaVolumeSlider = rootView.findViewById(id);
      if (mediaVolumeSlider == null) {
        break missingId;
      }

      id = R.id.reset_time_button;
      Button resetTimeButton = rootView.findViewById(id);
      if (resetTimeButton == null) {
        break missingId;
      }

      id = R.id.select_preset_button;
      Button selectPresetButton = rootView.findViewById(id);
      if (selectPresetButton == null) {
        break missingId;
      }

      id = R.id.set_time_button;
      Button setTimeButton = rootView.findViewById(id);
      if (setTimeButton == null) {
        break missingId;
      }

      id = R.id.should_update_media_volume;
      CheckBox shouldUpdateMediaVolume = rootView.findViewById(id);
      if (shouldUpdateMediaVolume == null) {
        break missingId;
      }

      id = R.id.time_picker;
      TimePicker timePicker = rootView.findViewById(id);
      if (timePicker == null) {
        break missingId;
      }

      return new WakeUpTimerFragmentBinding((ScrollView) rootView, is24hView, mediaVolumeSlider,
          resetTimeButton, selectPresetButton, setTimeButton, shouldUpdateMediaVolume, timePicker);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
